// 文件路径: f:\zdyz_ZYNQ_FPGA\vivado_code\vivado_prj\fft_zishiying_lvboqi\fftjian\fftjian.srcs\sources_1\new\fft_sign.v
//


module fft_dds_signal_recovery (
    input wire clk,                    // 系统时钟 (50 MHz)
    input wire rst_n,                  // 复位信号，低有效
    
    (* DONT_TOUCH = "TRUE" *) input wire  [7:0] D,               // 混合信号输入 (ADC)
    output wire adc_clk_d,             // 混合信号ADC采样时钟
    output wire adc_clk_n,             // 噪声信号ADC采样时钟
    output wire dac_clk,               // DAC输出时钟
    input wire  [7:0] noise_ref,       // 噪声参考信号输入
    
    (* DONT_TOUCH = "TRUE" *)  output wire  [7:0] A               // 恢复后的信号输出

);
// 信号居中处理
wire signed [7:0] d;
wire signed [7:0] n;
assign d = D - 8'd128;                 // 混合信号居中
assign n = noise_ref - 8'd128;         // 噪声信号居中
/////////////////////时钟定义////////////////////////////
reg clk_1m;                            // 1MHz 时钟
reg clk_5m;                            // 5MHz 时钟
wire clk_10M;                          // 10MHz 时钟
wire clk_5;                            // 5MHz 时钟输出
wire clk_1;                            // 1MHz 时钟输出
assign clk_5 = clk_5m;
assign clk_1 = clk_1m;
assign adc_clk_d = clk_1;              // 混合信号ADC采样时钟
assign adc_clk_n = clk_1;              // 噪声信号ADC采样时钟
assign dac_clk = ~clk_10M;             // DAC输出时钟
//////////////////////////////////////////////
wire signed [15:0] fft_out_d;          // 混合信号FFT输出（实部/虚部）
wire signed [15:0] fft_out_n;          // 噪声信号FFT输出（实部/虚部）
 
   
wire m_axis_data_tvalid_d;              // FFT输出有效（混合信号）
wire m_axis_data_tvalid_n;              // FFT输出有效（噪声信号）
wire m_axis_data_tlast_d;               // FFT输出最后一拍（混合信号）
wire m_axis_data_tlast_n;               // FFT输出最后一拍（噪声信号）
wire s_axis_config_tready_d;            // FFT配置就绪（混合信号）
wire s_axis_config_tready_n;            // FFT配置就绪（噪声信号）



  clk_wiz_0 instance_name
   (
    // 时钟输出端口
    .clk_out1(clk_10M),     // 输出10MHz时钟
    // 状态和控制信号
    .reset(!rst_n), // 复位输入
    .locked(),       // 锁定输出
   // 时钟输入端口
    .clk_in1(clk));      // 输入时钟

reg [3:0] counter;                      // 1MHz时钟分频计数器（0-9）

always @(posedge clk_10M or negedge rst_n) begin
    if (!rst_n) begin
        counter <= 0;
        clk_1m <= 0;
    end else begin
        if (counter == 9) begin
            counter <= 0;
            clk_1m <= ~clk_1m; // 翻转输出
        end else begin
            counter <= counter + 1;
        end
    end
end
reg [3:0] counter_1;                    // 5MHz时钟分频计数器（0-1）
always @(posedge clk_10M or negedge rst_n) begin
    if (!rst_n) begin
        counter_1 <= 0;
        clk_5m <= 0;
    end else begin
        if (counter_1 == 1) begin
            counter_1 <= 0;
            clk_5m <= ~clk_5m; // 翻转输出
        end else begin
            counter_1 <= counter_1 + 1;
        end
    end
end
 /////////////////////////////////////最后一拍标志//////////  
reg s_axis_data_tlast_d;                // 混合信号FFT输入最后一拍标志
reg s_axis_data_tlast_n;                // 噪声信号FFT输入最后一拍标志
 ///////////////////////
 wire s_axis_data_tready_d;              // FFT输入就绪（混合信号）
 wire s_axis_data_tready_n;              // FFT输入就绪（噪声信号）
 reg s_axis_data_tvalid_d;               // FFT输入有效（混合信号）
 reg s_axis_data_tvalid_n;               // FFT输入有效（噪声信号）
reg [15:0] data_index;                  // 数据帧计数器
always @(posedge clk_5 or negedge rst_n) begin
    if (!rst_n) begin
        data_index <= 0;// 初始化
        s_axis_data_tvalid_d <=0;
        s_axis_data_tvalid_n <= 0;
        s_axis_data_tlast_d <= 0;
        s_axis_data_tlast_n <= 0;
    end else if (s_axis_data_tready_d && s_axis_data_tready_n) begin
        // 只有ready有效时才传输数据
        s_axis_data_tvalid_d <= 1'b1;
         s_axis_data_tvalid_n <= 1'b1;
        s_axis_data_tlast_d  <= (data_index == 65535);
        s_axis_data_tlast_n <= (data_index == 65535);

        data_index <= (data_index == 65535) ? 0 : data_index + 1;
    end
    else begin
    s_axis_data_tvalid_d <= 1'b0;
         s_axis_data_tvalid_n <= 1'b0;
         s_axis_data_tlast_d <= 1'b0;
            s_axis_data_tlast_n <= 1'b0;
end
end





wire signed [23:0] tuser_d;             // FFT用户数据（混合信号）
wire  signed [23:0] tuser_n;             // FFT用户数据（噪声信号）

//////////////////////
wire event_data_in_channel_halt;         // 输入通道暂停事件
wire m_axis_status_tvalid;               // 状态数据有效
wire event_tlast_missing;                // 缺少tlast事件
wire m_axis_status_tready;               // 状态通道就绪
wire event_frame_started;                // 帧处理开始事件
wire event_tlast_unexpected;             // 意外tlast事件
wire event_status_channel_halt;          // 状态通道暂停事件
wire event_data_out_channel_halt;        // 输出通道暂停事件
    // FFT IP核实例化（混合信号）
    // 注意：*_axis_data_tdata实际为16位（高8位为无效，低8位为有效数据）
    xfft_0 xfft_d_inst (
  .aclk(clk_5),                         // FFT时钟
  .aresetn(rst_n),                      // FFT复位
  .s_axis_config_tdata(8'b00000001),    // FFT配置数据
  .s_axis_config_tvalid(1'b1),          // FFT配置有效
  .s_axis_config_tready(s_axis_config_tready_d), // FFT配置就绪
  .s_axis_data_tdata({8'b0, d}),        // FFT输入数据（16位，低8位为d[7:0]）
  .s_axis_data_tvalid(s_axis_data_tvalid_d),     // FFT输入有效
  .s_axis_data_tready(s_axis_data_tready_d),     // FFT输入就绪
  .s_axis_data_tlast(s_axis_data_tlast_d),       // FFT输入最后一拍
  .m_axis_data_tdata(fft_out_d),        // FFT输出数据（16位，实部/虚部）
  .m_axis_data_tuser(tuser_d),          // FFT用户数据（24位）
  .m_axis_data_tvalid(m_axis_data_tvalid_d),     // FFT输出有效
  .m_axis_data_tready(1'b1),            // FFT输出就绪
  .m_axis_data_tlast(m_axis_data_tlast_d),       // FFT输出最后一拍
  .m_axis_status_tdata(),               // FFT状态数据
  .m_axis_status_tvalid(m_axis_status_tvalid),   // FFT状态有效
  .m_axis_status_tready(1'b1),          // FFT状态通道就绪
  .event_frame_started(event_frame_started),     // 帧处理开始事件
  .event_tlast_unexpected(event_tlast_unexpected), // 意外tlast事件
  .event_tlast_missing(event_tlast_missing),     // 缺少tlast事件
  .event_status_channel_halt(event_status_channel_halt), // 状态通道暂停事件
  .event_data_in_channel_halt(event_data_in_channel_halt), // 输入通道暂停事件
  .event_data_out_channel_halt(event_data_out_channel_halt) // 输出通道暂停事件
);
wire signed [7:0] re, im;

wire signed [15:0] index;
assign index = tuser_d[15:0];

 wire signed  [15:0]fft_d;

assign {re,im} = fft_out_d;
assign fft_d = $signed(re)* $signed(re) + $signed(im)*$signed(im);

//     FFT IP核实例化（噪声信号）
    // 注意：*_axis_data_tdata实际为16位（高8位为无效，低8位为有效数据）
    xfft_0 xfft_noise_inst (
        .aclk(clk_5),                         // FFT时钟
  .aresetn(rst_n),                      // FFT复位
  .s_axis_config_tdata(8'b00000001),    // FFT配置数据
  .s_axis_config_tvalid(1'b1),          // FFT配置有效
  .s_axis_config_tready(s_axis_config_tready_n), // FFT配置就绪
  .s_axis_data_tdata({8'b0, n}),        // FFT输入数据（16位，低8位为n[7:0]）
  .s_axis_data_tvalid(s_axis_data_tvalid_n),     // FFT输入有效
  .s_axis_data_tready(s_axis_data_tready_n),     // FFT输入就绪
  .s_axis_data_tlast(s_axis_data_tlast_n),       // FFT输入最后一拍
  .m_axis_data_tdata(fft_out_n),        // FFT输出数据（16位，实部/虚部）
  .m_axis_data_tuser(tuser_n),          // FFT用户数据（24位）
  .m_axis_data_tvalid(m_axis_data_tvalid_n),     // FFT输出有效
  .m_axis_data_tready(1'b1),            // FFT输出就绪
  .m_axis_data_tlast(m_axis_data_tlast_n),       // FFT输出最后一拍
  .m_axis_status_tdata(),               // FFT状态数据
  .m_axis_status_tvalid(),              // FFT状态有效
  .m_axis_status_tready(1'b1),          // FFT状态通道就绪
  .event_frame_started(),               // 帧处理开始事件
  .event_tlast_unexpected(),            // 意外tlast事件
  .event_tlast_missing(),               // 缺少tlast事件
  .event_status_channel_halt(),         // 状态通道暂停事件
  .event_data_in_channel_halt(),        // 输入通道暂停事件
  .event_data_out_channel_halt()        // 输出通道暂停事件
    );
wire signed [7:0] re_n, im_n;

wire signed [15:0]index_n;
assign index_n = tuser_n[15:0];
 wire signed [15:0]fft_n;
assign {re_n,im_n} = fft_out_n;
assign fft_n =$signed( re_n)*$signed( re_n )+ $signed(im_n)*$signed(im_n);


wire signed [15:0] fft;
assign fft = fft_d - fft_n;

 reg signed [15:0] current_max;
 reg signed [15:0] max_value;
 reg signed [15:0] max_index;
 reg signed [15:0] current_index;
 reg max_valid;   
    // 数据有效信号
    wire data_valid = m_axis_data_tvalid_d & m_axis_data_tvalid_n;
    wire frame_end = m_axis_data_tlast_d & m_axis_data_tlast_n;
// reg  [15:0] fft_d_r, fft_n_r;
reg [15:0] current_max_fft_d ,
           current_max_fft_n ;
 reg [15:0]  max_fft_d,max_fft_n;      
    always @(posedge clk_5 or negedge  rst_n) begin
        if (!rst_n) begin
            current_max <= 32'h80000000; // 初始化为最小有符号数
            max_value <= 0;
            max_valid <= 0;
            current_index<= 0;
            max_index<=0;
        end else begin
            max_valid <= 0; // 默认无效
            // fft_d_r <= fft_d;
            // fft_n_r <= fft_n;
            if (data_valid) begin
                // 比较并更新最大值
                if (fft > current_max) begin
                    current_max <= fft;
                    current_index <= index;
                    // fft_d_r <= fft_d;
                    current_max_fft_d <= fft_d;
                    current_max_fft_n <= fft_n;
                    
                end
            end
            
            if (frame_end) begin
                // 帧结束时输出最大值及其索引
                max_value <= current_max;
                max_index <= current_index;
                max_fft_d <= current_max_fft_d;
                max_fft_n <= current_max_fft_n;
                max_valid <= 1;
                current_max <= 32'h80000000; // 重新初始化为最小有符号数
            end
        end
    end
    wire [15:0] abs_max_index;
     assign abs_max_index = (max_index[14]) ? (-$signed(max_index) ) : max_index;

reg [31:0] fword;                       // DDS调频字
always @(posedge clk_5 or negedge rst_n) begin
if(!rst_n) begin
fword <= 0;
end else begin

 fword <=abs_max_index<<<16;
 end
 end
 wire [31:0] fw;
 assign fw = fword;
wire signed [7:0] dac_raw, dac;         // DDS原始输出/缩放后输出

// DDS IP核实例化，输出8位数据
// 输入fword为32位无符号，输出dac_raw为8位
dds_compiler_0 your_instance_name (
  .aclk(clk_5),                                  // DDS时钟
  .s_axis_config_tvalid(1'b1),                   // DDS配置有效
  .s_axis_config_tdata(fw),                      // DDS配置数据（32位）
  .m_axis_data_tvalid(),                         // DDS输出有效
  .m_axis_data_tdata(dac_raw)                    // DDS输出数据（8位）
);

///////////////////////////////幅度提取////////////////////
(* DONT_TOUCH = "TRUE" *) wire [15:0] amp_d;
wire [15:0] amp_n;                // 混合信号/噪声信号幅度 // 对接CORDIC模块的16位宽接口
// CORDIC IP核实例化，输入16位，输出8位幅度
cordic_0 sqrt_d (
  .aclk(clk),                                    // CORDIC时钟
  .aresetn(rst_n),                               // CORDIC复位
  .s_axis_cartesian_tvalid(1'b1),                // 输入有效
  .s_axis_cartesian_tdata(max_fft_d),            // 输入数据（16位）
  .m_axis_dout_tvalid(),                         // 输出有效
  .m_axis_dout_tdata(amp_d)                      // 输出幅度，9位
);

cordic_0 sqrt_n (
  .aclk(clk),                                    // CORDIC时钟
  .aresetn(rst_n),                               // CORDIC复位
  .s_axis_cartesian_tvalid(1'b1),                // 输入有效
  .s_axis_cartesian_tdata(max_fft_n),            // 输入数据（16位）
  .m_axis_dout_tvalid(),                         // 输出有效
  .m_axis_dout_tdata(amp_n)                      // 输出幅度，9位
);
// amp为单边幅度，实际x2才是实际幅度

(* DONT_TOUCH = "TRUE" *) reg  signed [7:0] amp_d_signed;  
// 取amp_d[8:0]的9位有效数据，再做居中处理（缩放为8位）
// 这里只取低8位，并加128居中
// assign amp_d_signed = amp_d[7:0];       //

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        amp_d_signed <= 8'd0; // 初始化幅度
    end 
    else if (amp_d < 90)
    begin
        amp_d_signed <= amp_d[7:0]; //>>> 1; // 更新幅度
    end
end


// 50次滑动平均输出
reg [15:0] amp_sum = 0;
reg [5:0] amp_cnt = 0;
reg signed [7:0] amp_d_signed_avg = 0;

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        amp_sum <= 0;
        amp_cnt <= 0;
        amp_d_signed_avg <= 0;
    end else begin
        if (amp_cnt < 50) begin
            amp_sum <= amp_sum + amp_d_signed;
            amp_cnt <= amp_cnt + 1;
        end else begin
            amp_d_signed_avg <= amp_sum / 50;
            amp_sum <= 0;
            amp_cnt <= 0;
        end
    end
end


(* DONT_TOUCH = "TRUE" *) reg    signed     [15:0]      mult_full;
reg signed [7:0] last_amp = 8'd0;       // 上一次使用的amp_d_signed_avg
wire signed [8:0] delta;              // 需保留符号位
assign delta = amp_d_signed_avg - last_amp;

  always @(dac_raw) 
  begin
    if (delta < 3 && delta > -3) // 幅度变化小于3时，使用上一次幅度
    begin
        mult_full <= $signed(dac_raw) * $signed(last_amp);
    end
    else
        begin
            last_amp <= amp_d_signed_avg; // 更新幅度
            mult_full <= $signed(dac_raw) * $signed(amp_d_signed_avg);
        end
  end
  
assign A  = mult_full [14:7] + 8'd128 : 8'd128;    // 居中输出


ila_0 sign (
    .clk(clk),                          // ILA时钟
    
    .probe0(D),                         // 输入信号
    .probe1(A),                         // 恢复信号
    .probe2(amp_d[8:0]),
    .probe3(amp_d_signed),    
    .probe4(mult_full),
    .probe5(amp_d_signed_avg)
);

// ila_0 sign (
//     .clk(clk),                          // ILA时钟
//     .probe0(D),                         // 输入信号
//     .probe1(A),                         // 恢复信号
//     .probe2(event_data_in_channel_halt),// 输入通道暂停事件
//     .probe3(m_axis_status_tvalid),      // 状态数据有效
//     .probe4(event_tlast_missing),       // 缺少tlast事件
//     .probe5(m_axis_status_tready),      // 状态通道就绪
//     .probe6(event_frame_started),       // 帧处理开始事件
//     .probe7(event_tlast_unexpected),    // 意外tlast事件
//     .probe8(event_status_channel_halt), // 状态通道暂停事件
//     .probe9(event_data_out_channel_halt), // 输出通道暂停事件
//     .probe10(fw)                        // DDS调频字
// );
endmodule
